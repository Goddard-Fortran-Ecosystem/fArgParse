module Test_Arg_mod
   use FUnit
   implicit none

   @suite(name='Arg_suite')

contains

   @test
   subroutine test_is_legal()
      type(Arg) :: opt

      @assertFalse(opt%is_legal_option_string(''))
      @assertFalse(opt%is_legal_option_string('-'))
      @assertFalse(opt%is_legal_option_string('*'))
      @assertFalse(opt%is_legal_option_string('a'))
      @assertFalse(opt%is_legal_option_string('--'))
      @assertFalse(opt%is_legal_option_string('-*'))
      @assertFalse(opt%is_legal_option_string('-a-'))
      @assertFalse(opt%is_legal_option_string('-1'))

      @assertTrue(opt%is_legal_option_string('-a'))
      @assertTrue(opt%is_legal_option_string('-a'))
      @assertTrue(opt%is_legal_option_string('--a'))
      @assertTrue(opt%is_legal_option_string('--a-'))
      @assertTrue(opt%is_legal_option_string('--a1'))
      @assertTrue(opt%is_legal_option_string('--a_1'))
      
   end subroutine test_is_legal


   @test
   subroutine test_get_destination()
      type (Arg) :: opt

      opt = opt%make_option('-f') ! only name available
      @assertEqual('f', opt%get_destination())

      opt = opt%make_option('--g') ! only name available
      @assertEqual('g', opt%get_destination())

      opt = opt%make_option('-f','-g') ! first short name if no long name
      @assertEqual('f', opt%get_destination())

      opt = opt%make_option('-f','--g') ! long name takes precedence over short
      @assertEqual('g', opt%get_destination())

      opt = opt%make_option('--g','-f') ! long name takes precedence over short (regardless of order)
      @assertEqual('g', opt%get_destination())

      opt = opt%make_option('-f','--g', '--h') ! first long name takes precedent
      @assertEqual('g', opt%get_destination())

      opt = opt%make_option('--g','-f', '-h') ! random order test
      @assertEqual('g', opt%get_destination())
      
   end subroutine test_get_destination


end module Test_Arg_mod
