module Test_ArgParser
   use funit
   use fp_ArgParser
   use fp_Cast
   use fp_ErrorCodes
   use gFTL2_StringVector
   use gFTL2_StringUnlimitedMap
   use gFTL2_IntegerVector
   use gFTL2_RealVector
   implicit none

!   @suite(name='ArgParser_suite')



contains

   @test
   subroutine test_null()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      p = ArgParser()
      options = p%parse_args(arguments)

      @assertEqual(0, options%size())
      
   end subroutine test_null

   @test
   subroutine test_one_option_missing_argument()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      p = ArgParser()
      call p%add_argument('--arg', action='store')
      options = p%parse_args(arguments)

      @assertEqual(0, options%size())
      
   end subroutine test_one_option_missing_argument

   @test
   subroutine test_one_option_with_argument()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      call arguments%push_back('--arg')
      p = ArgParser()
      call p%add_argument('--arg', action='store_true')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      
   end subroutine test_one_option_with_argument

   @test
   subroutine test_option_type_logical()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      logical :: flag

      call arguments%push_back('--f1')
      call arguments%push_back('--f2')

      ! present
      p = ArgParser()
      call p%add_argument('--f1', action='store_true')
      call p%add_argument('--f2', action='store_false')

      options = p%parse_args(arguments)
      call cast(options%of('f1'), flag=flag)
      @assertTrue(flag)

      call cast(options%of('f2'), flag=flag)
      @assertFalse(flag)


   end subroutine test_option_type_logical

   @test
   subroutine test_option_type_integer()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      integer :: i
      integer :: status

      call arguments%push_back('-n')
      call arguments%push_back('1')
      

      p = ArgParser()
      call p%add_argument('-n', type='integer', action='store')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      call cast(options%of('n'), i, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(1, i)


   end subroutine test_option_type_integer

   @test
   subroutine test_option_type_integer_default()
      type (ArgParser) :: p
      type (StringVector) :: arguments, absent
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: n
      integer :: status
      
      p = ArgParser()
      call p%add_argument('-n', type='integer', action='store', default=5)
      options = p%parse_args(absent)

      @assertEqual(1, options%size())

      opt_value => options%of('n')
      @assertAssociated(opt_value)

      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(5, n)

      call arguments%push_back('-n')
      call arguments%push_back('3')
      options = p%parse_args(arguments)
      
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)

      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(3, n)


   end subroutine test_option_type_integer_default


   @test
   subroutine test_option_type_string()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      character(:), allocatable :: string
      integer :: status

      call arguments%push_back('-f')
      call arguments%push_back('foo')
      p = ArgParser()
      call p%add_argument('-f', type='string', action='store')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      opt_value => options%of('f')
      @assertAssociated(opt_value)

      call cast(options%of('f'), string, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual('foo', string)

   end subroutine test_option_type_string


   @test
   subroutine test_option_type_real()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      real :: x
      integer :: status
      
      call arguments%push_back('-x')
      call arguments%push_back('1.234')
      p = ArgParser()
      call p%add_argument('-x', type='real', action='store')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      opt_value => options%of('x')
      @assertAssociated(opt_value)

      call cast(options%of('x'), x, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(1.234, x)

   end subroutine test_option_type_real

   ! Need to support cases where the option value is in the same argument as the
   ! option specifier.   e.g.  "-n3" should be the equivalent of "-n 3".
   @test
   subroutine test_combo_short_option_string()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer')
      call arguments%push_back('-n3')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)

      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(3, n)

   end subroutine test_combo_short_option_string

   ! Long options require an "=" for embedded values:
   ! "--foo=3" is equivalent to "--foo 3"
   @test
   subroutine test_combo_long_option_string()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: foo
      integer :: status
     
      p = ArgParser()
      call p%add_argument('--foo', type='integer')
      call arguments%push_back('--foo=3')
      options = p%parse_args(arguments)

      @assertEqual(1, options%size())
      opt_value => options%of('foo')
      @assertAssociated(opt_value)

      call cast(options%of('foo'), foo, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(3, foo)


   end subroutine test_combo_long_option_string

   @test
   subroutine test_position_option()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('n', type='integer')
      call arguments%push_back('4')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)
      
      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(4, n)
      
   end subroutine test_position_option

   @test
   subroutine test_nargs_is_2_ints()
     type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      type (IntegerVector) :: found
      integer :: f1, f2

      p = ArgParser()
      call p%add_argument('--list', type='integer', n_arguments=2)
      call arguments%push_back('--list')
      call arguments%push_back('5')
      call arguments%push_back('7')

      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      call cast(options%of('list'), found, rc=status)
      @assertEqual(SUCCESS, status)

      @assertEqual(2, found%size())
      f1 = found%at(1, rc=status)
      @assertEqual(5, f1)
      @assertEqual(SUCCESS, status)

      f2 = found%at(2, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(7, f2)

    end subroutine test_nargs_is_2_ints

   @test
   subroutine test_nargs_is_2_reals()
     type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      type (RealVector) :: found
      real :: f1, f2

      p = ArgParser()
      call p%add_argument('--list', type='real', n_arguments=2)
      call arguments%push_back('--list')
      call arguments%push_back('5.')
      call arguments%push_back('7.')

      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      call cast(options%of('list'), found, rc=status)
      @assertEqual(SUCCESS, status)

      @assertEqual(2, found%size())

      f1 = found%at(1, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(5., f1)

      f2 = found%at(2, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(7., f2)

    end subroutine test_nargs_is_2_reals

   @test
   subroutine test_nargs_is_2_strings()
     type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      type (StringVector) :: found
      character(:), allocatable :: f1, f2

      p = ArgParser()
      call p%add_argument('--list', type='string', n_arguments=2)
      call arguments%push_back('--list')
      call arguments%push_back('cat')
      call arguments%push_back('dog')

      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      call cast(options%of('list'), found, rc=status)
      @assertEqual(SUCCESS, status)

      @assertEqual(2, found%size())

      f1 = found%at(1, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual('cat', f1)

      f2 = found%at(2, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual('dog', f2)

    end subroutine test_nargs_is_2_strings

   ! Check that using n_arguments='?' works correctly when there are
   ! zero associated parameters.
   @test
   subroutine test_nargs_is_question_mark_0_arg()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer', n_arguments='?', const=3)
      call arguments%push_back('-n')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)
      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(3, n)

   end subroutine test_nargs_is_question_mark_0_arg

   ! Check that using n_arguments='?' works correctly when there is
   ! one associated parameter.
   @test
   subroutine test_nargs_is_question_mark_1_arg()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      type(IntegerVector) :: found
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer', n_arguments='?')
      call arguments%push_back('-n')
      call arguments%push_back('1')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)
      
      call cast(options%of('n'), n, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(1, n)

   end subroutine test_nargs_is_question_mark_1_arg


   ! Check that using n_arguments='*' works correctly when there is
   ! no associated parameter.
   @test
   subroutine test_nargs_is_asterisk_0_arg()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      type(IntegerVector) :: found
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer', n_arguments='*', default=-1)
      call arguments%push_back('-n')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)

      call cast(options%of('n'), found, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(0, found%size())

    end subroutine test_nargs_is_asterisk_0_arg

   ! Check that using n_arguments='*' works correctly when there is
   ! one associated parameter.
   @test
   subroutine test_nargs_is_asterisk_1_arg()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      type(IntegerVector) :: found
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer', n_arguments='*')
      call arguments%push_back('-n')
      call arguments%push_back('3')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)
      
      call cast(options%of('n'), found, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(1, found%size())
      @assertEqual(3, found%of(1))

    end subroutine test_nargs_is_asterisk_1_arg

   ! Check that using n_arguments='*' works correctly when there is
   ! one associated parameter.
   @test
   subroutine test_nargs_is_asterisk_2_arg()
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      class(*), pointer :: opt_value
      type(IntegerVector) :: found
      integer :: status
      integer :: n

      p = ArgParser()
      call p%add_argument('-n', type='integer', n_arguments='*')
      call arguments%push_back('-n')
      call arguments%push_back('3')
      call arguments%push_back('5')

      ! sanity checks
      options = p%parse_args(arguments)
      @assertEqual(1, options%size())
      opt_value => options%of('n')
      @assertAssociated(opt_value)
      
      call cast(options%of('n'), found, rc=status)
      @assertEqual(SUCCESS, status)
      @assertEqual(2, found%size())
      @assertEqual(3, found%of(1))
      @assertEqual(5, found%of(2))

    end subroutine test_nargs_is_asterisk_2_arg

    ! The following test is an attempt to replicate a problem
    ! found when using fArgParse in the driver of pfunit 4.0
    ! 
    @test
    subroutine test_pfunit_use_case()
       use fp_CommandLineArguments
       use fp_String
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options
      class(*), pointer :: opt

      p = ArgParser()

      call p%add_argument('-d', '--debug', '--verbose', action='store_true', &
           & help='make output more verbose')

      call p%add_argument('-f', '--filter', action='store', &
           & help='only run tests that match pattern')
      
      call p%add_argument('-o', '--output', action='store', &
           & help='only run tests that match pattern')

      call p%add_argument('-r', '--runner', action='store', default='TestRunner', &
           & help='use non-default runner run tests')

      call p%add_argument('-s', '--skip', type='integer', &
           & dest='n_skip', action='store', default=0, &
           & help='skip the first n_skip tests; only used with RemoteRunner')

#ifdef __GFORTRAN__
      call p%parse_args_kludge(option_values=options, arguments=arguments)
#else
      options = p%parse_args(arguments)
#endif

      opt => options%of('runner')
      select type (opt)
      class is (String)
         @assertEqual('TestRunner', opt%string)
      class default
         @assertFalse(.true.,message='should not get here')
      end select
       
    end subroutine test_pfunit_use_case

    ! Reproducer for Issue #61
    @test
    subroutine test_unprocessed_argument
      use fp_CommandLineArguments
      use fp_String
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options
      class(*), pointer :: opt

      p = ArgParser()

      call p%add_argument('-d', '--debug', '--verbose', action='store_true', &
           & help='make output more verbose')

      ! Crashes before fix
      call arguments%push_back('-not-a-valid-argument')
      options = p%parse_args(arguments)
      
    end subroutine test_unprocessed_argument

    ! Reproducer for issue #105
    @test
    subroutine test_greedy_plus
      use fp_CommandLineArguments
      use fp_String
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options
      class(*), pointer :: opt
      type(StringVector) :: p_vals

      p = ArgParser()
      call p%add_argument('-p','--potential',type='string',n_arguments='+',help='...')
      call p%add_argument('-q','--query',type='string',help='...')

      call arguments%push_back('-p')
      call arguments%push_back('s1')
      call arguments%push_back('s2')
      call arguments%push_back('s3')
      call arguments%push_back('-q')
      call arguments%push_back('hello')
      options = p%parse_args(arguments)
      @assert_that(int(options%size()), is(2))

      call cast(options%of('potential'), p_vals)
      @assert_that(int(p_vals%size()), is(3))
      @assertEqual('s1', p_vals%of(1))
      @assertEqual('s2', p_vals%of(2))
      @assertEqual('s3', p_vals%of(3))

   end subroutine test_greedy_plus

    @test
    subroutine test_choices
      type (ArgParser) :: p
      type (StringVector) :: arguments
      type (StringUnlimitedMap) :: options

      p = ArgParser()

      call p%add_argument('-d', type='string', action='store', choices=['A', 'B'])

      call arguments%push_back('-d')
      call arguments%push_back('A')
      options = p%parse_args(arguments)
      
   end subroutine test_choices

end module Test_ArgParser
